/**
 * File:	include/instserver/complex.ycp
 * Package:	Configuration of instserver
 * Summary:	Dialogs definitions
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

textdomain "instserver";

import "String";

list<string> ReadMediaFile(string media) {
    if (SCR::Read(.target.size, media) != -1 )
    {
        string media_contents = (string)SCR::Read(.target.string, media);
        list<string> m = splitstring(media_contents, "\n");
        return m;
    } else {
        return [];
    }
}

/**
* split CPE ID and distro label (separated by comma)
* @param string distro "DISTRO" value from content file
* @return map parsed value, map: $["name":<string>, "cpeid":<string>]
*/
map<string, string> distro_map(string distro)
{
    if (distro == nil)
    {
        y2warning("Received nil distro value");
        return nil;
    }

    integer comma_pos = search(distro, ",");

    if (comma_pos == nil)
    {
        y2warning("Cannot parse DISTRO value: %1", distro);
        return nil;
    }

    return $[ "cpeid" : substring(distro, 0, comma_pos),
        "name" : substring(distro, comma_pos + 1, size(distro)) ];
}


map<string,string> ReadContentFile(string content) {
    y2debug("Reading content %1", content);

    map<string,string> contentmap = (map<string,string>)SCR::Read(.content_file, content);

    contentmap = mapmap(string key, string value, contentmap,
	{
	    return $[key : String::CutBlanks(value)];
	}
    );
    y2milestone("Read content file %1: %2", content, contentmap);

    // "DISTRO" flag is used in SLE12, "NAME" and "LABEL" are missing
    // format: "<cpeid>,<product_name>", CPE ID is defined here:
    // http://csrc.nist.gov/publications/nistir/ir7695/NISTIR-7695-CPE-Naming.pdf
    string distro = contentmap["DISTRO"]:nil;

    if (distro != nil)
    {
        map<string, string> distro_values = distro_map(distro);

        if (distro_values != nil)
        {
            // name is displayed in overview
            contentmap["NAME"] = distro_values["name"]:"";
            // label is written to SLP config
            contentmap["LABEL"] = distro_values["name"]:"";

            contentmap["CPEID"] = distro_values["cpeid"]:"";
        }
    }

    return contentmap;
}

string basename (string file)
{
    list pathComponents = splitstring(file, "/");
    string ret = pathComponents[size(pathComponents) -1 ]: "";
    return ( ret );
}

/**
 * Get directory name
 * @param string path
 * @return  string dirname
 */
string dirname (string file)
{
    list pathComponents = splitstring(file, "/");
    string last = pathComponents[size(pathComponents) -1]:"";
    string ret = substring(file, 0 , size(file) - size(last) -1 );
    return (ret);
}
/* EOF */
}
