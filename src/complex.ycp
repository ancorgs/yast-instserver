/**
 * File:	include/instserver/complex.ycp
 * Package:	Configuration of instserver
 * Summary:	Dialogs definitions
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

textdomain "instserver";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Instserver";

include "instserver/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Instserver::Modified();
}

boolean ReallyAbort() {
    return !Instserver::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // Instserver::AbortFunction = PollAbort;
    boolean ret = Instserver::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");

    // Instserver::AbortFunction = PollAbort;
    boolean ret = Instserver::Write();
    return ret ? `next : `abort;
}

/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    /* Instserver summary dialog caption */
    string caption = _("Source Configuration");

    list summary = Instserver::Summary();
    list unconfigured = summary[1]:[];
    string configured = summary[0]:"";

    /* Frame label */
    term contents =  `HBox(
	`HSpacing(1.5),
	`VBox(
	    `VSpacing(0.4),
	    `Frame(_("Sources to Configure"), `HBox(
		`HSpacing(0.5),
		`VBox(
		    `SelectionBox(`id(`detected_selbox), `opt(`notify),
			_("A&vailable are:"), unconfigured),
		    `HBox(
			`HSpacing(0.5),
			`HStretch(),
			`PushButton(`id(`configure_button), `opt (`key_F3),
                            _("&Configure..."))
                        )
		),
		`HSpacing(0.5)
	    )),
	    `VSpacing(0.3),
	    `RichText(`id(`configured_richtext), configured),
	    `Right(
                `HBox(
                    `PushButton(`id(`settings_button),
                        _("Settin&gs")),
                    `PushButton(`id(`edit_button), `opt (`key_F4),
                        _("C&hange..."))
                    )
                ),
	    `VSpacing(0.4)
	),
	`HSpacing(1.5)
            );

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `settings_button) {
            ret = `settings;
            break;
        }
        /* overview dialog */
        else if(ret == `edit_button) {
            ret = `overview;
            break;
        }
        /* configure the selected device */
        else if(ret == `configure_button) {
            any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
            if(selected == `other) {
                ret = `other;
            }
            else {
                ret = `configure;
            }
            Instserver::Config = $[];
            Instserver::Config["directory"] = (selected!=nil) ? (string)selected : "";
            if (selected!=nil && selected != "")
                Instserver::Config["detected"] = true;
            break;
        }
        else if(ret == `next) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog() {

    /* Instserver overview dialog caption */
    string caption = _("Installation Server");

    list overview = Instserver::Overview();

    term contents = Wizard_hw::ConfiguredContent(
	/* Table header */
	`header(_("Configuration"), _("Product")),
	overview, nil, nil, nil, nil );

    contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

        string current = (string) UI::QueryWidget(`id(`table), `CurrentItem );
	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* add */
        else if(ret == `add_button) {
            Instserver::Config = $[];
            ret = `add;
            break;
        }
        /* edit */
        else if(ret == `edit_button) {
            Instserver::Config = Instserver::Configs[current]:$[];
            ret = `edit;
            break;
        }
        /* delete */
        else if(ret == `delete_button) {
            y2debug("Deleting: %1", current);
            Instserver::Configs = filter(string k, map<string, any> v, Instserver::Configs, ``(k!=current));
	    Instserver::to_delete = add(Instserver::to_delete, current);
            overview = Instserver::Overview();
            UI::ChangeWidget(`id(`table), `Items, overview);
            if (size(overview) == 0 )
            {
                UI::ChangeWidget(`id(`edit_button), `Enabled, false);
                UI::ChangeWidget(`id(`delete_button), `Enabled, false);
            }
            continue;
        }
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
