/**
 * File:	include/instserver/complex.ycp
 * Package:	Configuration of instserver
 * Summary:	Dialogs definitions
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

textdomain "instserver";

import "Label";
import "Popup";
import "Wizard";
import "WizardHW";
import "Instserver";

include "instserver/helps.ycp";

// selected installation source
string selected_source = "";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Instserver::Modified();
}

boolean ReallyAbort() {
    return !Instserver::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // Instserver::AbortFunction = PollAbort;
    boolean ret = Instserver::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");

    // Instserver::AbortFunction = PollAbort;
    boolean ret = Instserver::Write();
    return ret ? `next : `abort;
}


define list<map<string,any> > createOverviewTable() {

    map<string, map<string, any> > conf  = Instserver::Configs;

    y2milestone("Current configuration: conf: %1", conf);

    list<map<string,any> > ret = [];

    if (conf != nil && size(conf) > 0)
    {
	foreach(string name, map cfg, conf, {
		list<string> descr = [];

		if (haskey(cfg, "LABEL") && cfg["LABEL"]:"" != nil)
		{
		    // source overview - %1 is product name (e.g. "SUSE LINUX Version 10.0")
		    descr = add(descr, sformat(_("Label: %1"), cfg["LABEL"]:""));
		}

		if (haskey(cfg, "slp") && cfg["slp"]:false != nil)
		{
		    // yes/no string displayed in the overview
		    descr = add(descr, sformat(_("Announce Using SLP: %1"), (cfg["slp"]:false) ? _("Yes") : _("No")));
		}

		map<string,any> r = $[
		    "id" : name,
		    "table_descr" : [ name, cfg["PRODUCT"]:"" + " " + cfg["VERSION"]:"" ],
		    "rich_descr" : WizardHW::CreateRichTextDescription(name, descr)
		];

		ret = add(ret, r);
	    }
	);
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog() {

    /* Instserver overview dialog caption */
    string caption = _("Installation Server");
    list<list> extra_buttons = [
	// menu item
	[`config, _("&Server Configuration...")],
    ];
    list<map<string,any> > items = createOverviewTable();

    WizardHW::CreateHWDialog(caption,
	HELPS["overview"]:"",
	// table header
	[ _("Configuration"), _("Product") ],
	extra_buttons
    );

    WizardHW::SetContents(items);

    Wizard::SetNextButton(`next, Label::FinishButton());


    any ret = nil;
    while(true) {

	// initilize selected selected source
	if (selected_source == "")
	{
	    selected_source = WizardHW::SelectedItem();
	}

	// set previously selected source
	WizardHW::SetSelectedItem(selected_source);


	map<string,any> ev = WizardHW::WaitForEvent();
	y2milestone("WaitForEvent: %1", ev);

	ret = (symbol)ev["event","ID"]:nil;
        string current = ev["selected"]:"";
	selected_source = WizardHW::SelectedItem();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* add */
        else if(ret == `add) {
            Instserver::Config = $[];
            break;
        }
        /* edit */
        else if(ret == `edit) {
            Instserver::Config = Instserver::Configs[current]:$[];
            break;
        }
        /* delete */
        else if(ret == `delete) {
            y2milestone("Deleting: %1", current);
            Instserver::Configs = filter(string k, map<string, any> v, Instserver::Configs, ``(k!=current));
	    Instserver::to_delete = add(Instserver::to_delete, current);

	    // refresh content of the table
	    items = createOverviewTable();
	    WizardHW::SetContents(items);
	    WizardHW::SetSelectedItem("");

	    // the selected source has just been removed
	    selected_source = "";

            continue;
        }
        else if(ret == `next || ret == `back || ret == `config) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
