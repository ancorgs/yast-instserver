/**
 * File:	include/instserver/dialogs.ycp
 * Package:	Configuration of instserver
 * Summary:	Dialogs definitions
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */

{

textdomain "instserver";

import "Label";
import "Wizard";
import "Instserver";

include "instserver/helps.ycp";
include "instserver/routines.ycp";




any CopyCDs( string dir) {
    import "Installation";
    boolean is_mounted = false;
    string default_device = "/dev/cdrom";
    string alternate_device = default_device;

    any result = nil;

    // free mount point
    SCR::Execute (.target.umount, Installation::sourcedir);

    // CD is mounted. Check contents.
    string cdpath = Installation::sourcedir;

    integer current_cd = 1;
    integer total_cds = 1;
    boolean standalone = true;
    boolean baseproduct = false;
    string base = "";
    string basever = "";

    // Loop for all CDs
    while (true)
    {
        string msg = "";
        if (standalone)
        {
            msg = sformat(_("Please insert the %1. CD-ROM, then press continue."), current_cd );
        }
        else
        {
            msg = sformat(_("Please insert the %1. CD-ROM of %2-%3."), current_cd, base, basever );
        }

        // try to mount device
        while (SCR::Execute (.target.mount, [ default_device, Installation::sourcedir]) == false)
        {
            if ((alternate_device != default_device)
                    && (SCR::Execute (.target.mount, [ alternate_device, Installation::sourcedir]) == true))
            {
                break;
            }

            // cant mount /dev/cdrom popup
            if (!Popup::ContinueCancel( msg ))
            {
                return `abort;
            }
        }

        is_mounted = true;
        y2milestone("mounted cdrom");

        list media = ReadMediaFile( sformat("%1/media.%2/media", cdpath, current_cd ));
        map content = $[];

        if (size(media) == 0 )
        {
            SCR::Execute (.target.umount, Installation::sourcedir);
            if (!Popup::ContinueCancel( msg ))
            {
                return `abort;
            }
            continue;
        }
        else
        {
            if (media[2]:"" != "")
            {
               total_cds = tointeger(media[2]:"-1");
            }
           content = ReadContentFile(cdpath + "/content");
           if (content["PRODUCT"]:"dummy" != base && content["VERSION"]:"dummy" != basever  && !standalone)
           {
               SCR::Execute (.target.umount, Installation::sourcedir);
               if (!Popup::ContinueCancel( msg ))
               {
                   return `abort;
               }
               continue;
           }
        }


        string tgt = sformat("%1/%2/CD%3", dir, content["DISTPRODUCT"]:"", current_cd );
        string shorttgt = sformat("%1/CD%2",  content["DISTPRODUCT"]:"", current_cd );

        list cmds = [];
        // Copy stuff here.
        // Now, we check if this product on the CD is based on some other product. If
        // yes, then it will be copied into  a sub-directory and not in the requested
        // root.
        if ( content["BASEPRODUCT"]:"" != "SuSE Linux" && content["BASEVERSION"]:"" != "")
        {
            // This product is based on some other product
            base = content["BASEPRODUCT"]:"";
            basever = content["BASEVERSION"]:"";
            standalone = false;
            baseproduct = false;
            // Create product dir
            SCR::Execute(.target.mkdir, tgt );
            if (current_cd == 1)
            {
                foreach(string symlink , ["content", "media.1" ], ``{
                    cmds=add(cmds, sformat("pushd %1 && ln -sf %2/%3 && popd ", dir, shorttgt, symlink));
                    });
            }
        }
        else if (content["PRODUCT"]:"dummy" == base && content["VERSION"]:"dummy" == basever )
        {
            baseproduct = true;
            SCR::Execute(.target.mkdir, tgt );
        }
        else
        {
            // else, we create CD1, CD2, etc.
            baseproduct = true;
            tgt = sformat("%1/CD%2", current_cd );
            SCR::Execute(.target.mkdir, tgt);
        }
        // temp copy commands
        string cpcmd = sformat("cp -a %1/media.%2 %3", cdpath, current_cd, tgt);
        SCR::Execute(.target.bash, cpcmd);
        cpcmd = sformat("cp  %1/content %3", cdpath, current_cd, tgt);
        SCR::Execute(.target.bash, cpcmd);


        if (size(cmds) > 0 ) {
            foreach(string cmd , cmds, ``{
                    SCR::Execute(.target.bash, cmd);
                    });
            cmds = [];
        }


        SCR::Execute (.target.umount, Installation::sourcedir);

        if (total_cds == current_cd && !standalone && !baseproduct)
        {
            current_cd = 1;
        }
        else if (total_cds == current_cd && ( standalone || baseproduct))
        {
            break;
        }
        else
        {
            current_cd = current_cd + 1;
        }
    }
    return `next;
}

/**
 * Configure1 dialog
 * @return dialog result
 */
any Configure1Dialog () {

    /* Instserver configure1 dialog caption */
    string caption = _("Source Configuration");

    string dir = Instserver::Config["directory"]:"";
    boolean slp = Instserver::Config["slp"]:false;
    boolean promptmore = false;

    /* Instserver configure1 dialog contents */
    term contents =
        `Top(
                `VBox(
                    `Left(`TextEntry(`id(`dir), _("Source Name:"), dir)),
                    `Left(
                        `CheckBox(`id(`prompt), _("Prompt for additional CDs (Service Packs, Additional Package CDs, etc.)"), promptmore )
                        ),
                    `Left(
                        `CheckBox(`id(`slp), _("Announce as Installation Service with SLP"), slp )
                        )
                    )
            );

    Wizard::SetContentsButtons(caption, contents, HELPS["initial"]:"initial",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `back ) {
            break;
        }
        else if(ret == `next ) {
            dir = (string)UI::QueryWidget(`id(`dir), `Value);
            slp  = (boolean)UI::QueryWidget(`id(`slp), `Value);
            Instserver::Config["directory"] = dir;
            Instserver::Config["slp"] = slp;
            string target = Instserver::ServerSettings["directory"]:"" + "/" + dir;
            symbol ret = `none;
            if (SCR::Read(.target.size, target + "/content") != -1 )
            {
                Popup::Message(_("Contents already exist in this directory, not copying CDs."));
                ret = `next;
            }
            else
            {
                ret = (symbol)CopyCDs(target);
            }

            if (ret == `next)
            {
                map content = (map)SCR::Read(.content_file, target + "/content");
                y2milestone("content: %1", content);
                Instserver::Config["name"] = dir;
                Instserver::Config = (map)union(Instserver::Config, content);
            }
            Instserver::UpdateConfig();
            Instserver::modified = true;
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Configure2 dialog
 * @return dialog result
 */
any Configure2Dialog () {

    /* Instserver configure2 dialog caption */
    string caption = _("Instserver Configuration");

    /* Instserver configure2 dialog contents */
    term contents = `Label (_("Second part of configuration of instserver"));

    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `back) {
            break;
        }
        else if(ret == `next) {

            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Server dialog
 * @return dialog result
 */
any ServerDialog () {

    /* Instserver configure2 dialog caption */
    string caption = _("Initial Setup - Servers");

    string dir = "";
    symbol source = `http;
    string nfsoptions = "ro,root_squash,sync";
    string wildcard = "";

    term c1 =
        `HBox(
                 `VBox(
                        `VSquash(
                            `HBox(
                                `TextEntry(`id(`dir), _("Di&rectory to contain sources:"), dir),
                                `VBox(
                                    `VSpacing(),
                                    `Bottom(`PushButton(`id(`select_dir), _("Select &Directory")))
                                    )
                                )
                            )
                     )
             );

    term buttons =
        `VBox (
                // radio button label
                `Left (`RadioButton (`id (`http), `opt (`notify),
                        _("&Configure a HTTP Source"), source == `http)),
                // radio button label
                `Left (`RadioButton (`id (`ftp), `opt (`notify),
                        _("&Configure as FTP Source"), source == `ftp)),
                // radio button label
                `Left (`RadioButton (`id (`nfs), `opt (`notify),
                        _("&Configure as NFS Source"), source == `nfs)),
                `HBox(
                    `HWeight(10, `Empty()),
                    `HWeight(80,
                        `VBox(
                            `HBox(
                                `HWeight(2,`TextEntry(`id(`wildcard), _("&Hosts wildcard"), wildcard)),
                                `HWeight(1, `Empty())
                                ),
                            `HBox(
                                `HWeight(2,`TextEntry(`id(`nfsoptions), _("&Options"), nfsoptions)),
                                `HWeight(1, `Empty())
                                )
                            )
                        )
                    )

              );

    /* Instserver configure2 dialog contents */
    term contents =
        `Top (
                `VBox(
                    `RadioButtonGroup (
                        `id (`service),
                        buttons
                        ),
                    `VSpacing(1),
                    c1
                    )
             );

    Wizard::SetContentsButtons(caption, contents, HELPS["server"]:"server",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

        source = (symbol)UI::QueryWidget(`id(`service), `CurrentButton);
        if (source == `ftp )
        {
            UI::ChangeWidget(`id(`nfsoptions), `Enabled , false);
            UI::ChangeWidget(`id(`wildcard), `Enabled , false);
        }
        else if (source == `nfs )
        {
            UI::ChangeWidget(`id(`nfsoptions), `Enabled , true);
            UI::ChangeWidget(`id(`wildcard), `Enabled , true);
        }
        else if (source == `http )
        {
            UI::ChangeWidget(`id(`nfsoptions), `Enabled , false);
            UI::ChangeWidget(`id(`wildcard), `Enabled , false);
        }
        ret = UI::UserInput();
        dir = (string)UI::QueryWidget(`id(`dir), `Value);

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
        }
        else if (ret ==`select_dir)
        {
            any new_dir = UI::AskForExistingDirectory( dir, _("Select Directory"));
            if (new_dir != nil)
            {
                UI::ChangeWidget(`id(`dir), `Value, (string) new_dir);
            }
            continue;
        }

        else if(ret == `next || ret == `back) {
            boolean r = false;
            if (source == `nfs)
            {
                nfsoptions = (string)UI::QueryWidget(`id(`nfsoptions), `Value);
                wildcard = (string)UI::QueryWidget(`id(`wildcard), `Value);
                r = Instserver::SetupNFS(dir , wildcard + "(" + deletechars(nfsoptions," ") + ")" );
                if (!r)
                {
                    Report::Error(_("Error occured while configuring NFS"));
                    continue;
                }
                Instserver::ServerSettings["service"] = source;
                Instserver::ServerSettings["directory"] = dir;
            }
            else if (source == `ftp )
            {
                r = Instserver::SetupFTP(dir , "/srv/ftp" );
                if (!r)
                {
                    Report::Error(_("Error occured while configuring FTP"));
                    continue;
                }
                Instserver::ServerSettings["service"] = source;
                Instserver::ServerSettings["directory"] = dir;
            }
            Instserver::modified = true;
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
